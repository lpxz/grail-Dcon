///* Generated By:JavaCC: Do not edit this line. PNparserTokenManager.java */
//package hk.ust.lpxz.petri.graph.GadaraSupport.parser;
//import hk.ust.lpxz.petri.graph.GadaraSupport.CommGadaraFormat;
//import java.io.StringReader;
//import java.io.Reader;
//import java.io.BufferedReader;
//import java.io.File;
//import java.io.FileReader;
//import java.io.IOException;
//import java.util.ArrayList;
//import java.util.List;
//import java.util.HashMap;
//import java.util.HashSet;
//
//public class PNparserTokenManager implements PNparserConstants
//{
//  public static  java.io.PrintStream debugStream = System.out;
//  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
//private static final int jjStopStringLiteralDfa_0(int pos, long active0)
//{
//   switch (pos)
//   {
//      case 0:
//         if ((active0 & 0x1ffffbfffc00L) != 0L)
//            return 4;
//         return -1;
//      case 1:
//         if ((active0 & 0x1ffffbfffc00L) != 0L)
//            return 4;
//         return -1;
//      case 2:
//         if ((active0 & 0x1ffffbfffc00L) != 0L)
//            return 4;
//         return -1;
//      case 3:
//         if ((active0 & 0x1ffffbfffc00L) != 0L)
//            return 4;
//         return -1;
//      case 4:
//         if ((active0 & 0x17dff3fffc00L) != 0L)
//            return 4;
//         return -1;
//      case 5:
//         if ((active0 & 0x7cfe3fffc00L) != 0L)
//            return 4;
//         return -1;
//      case 6:
//         if ((active0 & 0x20ee3fffc00L) != 0L)
//            return 4;
//         return -1;
//      case 7:
//         if ((active0 & 0x20ee2fdfc00L) != 0L)
//            return 4;
//         return -1;
//      case 8:
//         if ((active0 & 0xee2fcfc00L) != 0L)
//            return 4;
//         return -1;
//      case 9:
//         if ((active0 & 0x6e0f8fc00L) != 0L)
//            return 4;
//         return -1;
//      case 10:
//         if ((active0 & 0x460f87c00L) != 0L)
//            return 4;
//         return -1;
//      case 11:
//         if ((active0 & 0x40787c00L) != 0L)
//            return 4;
//         return -1;
//      case 12:
//         if ((active0 & 0x783c00L) != 0L)
//            return 4;
//         return -1;
//      case 13:
//         if ((active0 & 0x681c00L) != 0L)
//            return 4;
//         return -1;
//      case 14:
//         if ((active0 & 0x681c00L) != 0L)
//            return 4;
//         return -1;
//      case 15:
//         if ((active0 & 0x200c00L) != 0L)
//            return 4;
//         return -1;
//      default :
//         return -1;
//   }
//}
//private static final int jjStartNfa_0(int pos, long active0)
//{
//   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
//}
//static private final int jjStopAtPos(int pos, int kind)
//{
//   jjmatchedKind = kind;
//   jjmatchedPos = pos;
//   return pos + 1;
//}
//static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
//{
//   jjmatchedKind = kind;
//   jjmatchedPos = pos;
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) { return pos + 1; }
//   return jjMoveNfa_0(state, pos + 1);
//}
//static private final int jjMoveStringLiteralDfa0_0()
//{
//   switch(curChar)
//   {
//      case 44:
//         return jjStopAtPos(0, 6);
//      case 45:
//         return jjMoveStringLiteralDfa1_0(0x4000000L);
//      case 59:
//         return jjStopAtPos(0, 7);
//      case 61:
//         return jjStopAtPos(0, 5);
//      case 65:
//         return jjMoveStringLiteralDfa1_0(0x7f0000L);
//      case 80:
//         return jjMoveStringLiteralDfa1_0(0x1807c00L);
//      case 84:
//         return jjMoveStringLiteralDfa1_0(0x8000L);
//      case 86:
//         return jjMoveStringLiteralDfa1_0(0x2000000L);
//      case 99:
//         return jjMoveStringLiteralDfa1_0(0x8240000000L);
//      case 101:
//         return jjMoveStringLiteralDfa1_0(0x3020000000L);
//      case 102:
//         return jjMoveStringLiteralDfa1_0(0x100000000000L);
//      case 109:
//         return jjMoveStringLiteralDfa1_0(0x800000000L);
//      case 111:
//         return jjMoveStringLiteralDfa1_0(0x480000000L);
//      case 112:
//         return jjMoveStringLiteralDfa1_0(0x44000000000L);
//      case 114:
//         return jjMoveStringLiteralDfa1_0(0x30000000000L);
//      case 115:
//         return jjMoveStringLiteralDfa1_0(0x8000000L);
//      case 116:
//         return jjMoveStringLiteralDfa1_0(0x80010000000L);
//      case 119:
//         return jjMoveStringLiteralDfa1_0(0x100000000L);
//      case 123:
//         return jjStopAtPos(0, 9);
//      case 125:
//         return jjStopAtPos(0, 8);
//      default :
//         return jjMoveNfa_0(3, 0);
//   }
//}
//static private final int jjMoveStringLiteralDfa1_0(long active0)
//{
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(0, active0);
//      return 1;
//   }
//   switch(curChar)
//   {
//      case 62:
//         if ((active0 & 0x4000000L) != 0L)
//            return jjStopAtPos(1, 26);
//         break;
//      case 97:
//         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L);
//      case 98:
//         return jjMoveStringLiteralDfa2_0(active0, 0x480000000L);
//      case 101:
//         return jjMoveStringLiteralDfa2_0(active0, 0x20901800000L);
//      case 105:
//         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
//      case 108:
//         return jjMoveStringLiteralDfa2_0(active0, 0x40000007c00L);
//      case 110:
//         return jjMoveStringLiteralDfa2_0(active0, 0x1020000000L);
//      case 111:
//         return jjMoveStringLiteralDfa2_0(active0, 0x50000000L);
//      case 112:
//         return jjMoveStringLiteralDfa2_0(active0, 0x1c000000000L);
//      case 114:
//         return jjMoveStringLiteralDfa2_0(active0, 0x800007f8000L);
//      case 116:
//         return jjMoveStringLiteralDfa2_0(active0, 0x208000000L);
//      case 120:
//         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
//      default :
//         break;
//   }
//   return jjStartNfa_0(0, active0);
//}
//static private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
//{
//   if (((active0 &= old0)) == 0L)
//      return jjStartNfa_0(0, old0); 
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(1, active0);
//      return 2;
//   }
//   switch(curChar)
//   {
//      case 97:
//         return jjMoveStringLiteralDfa3_0(active0, 0x4000000fc00L);
//      case 99:
//         return jjMoveStringLiteralDfa3_0(active0, 0x207f0000L);
//      case 105:
//         return jjMoveStringLiteralDfa3_0(active0, 0x2100000000L);
//      case 107:
//         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
//      case 108:
//         return jjMoveStringLiteralDfa3_0(active0, 0x11c000000000L);
//      case 109:
//         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
//      case 110:
//         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
//      case 111:
//         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
//      case 114:
//         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
//      case 115:
//         return jjMoveStringLiteralDfa3_0(active0, 0x20480000000L);
//      case 116:
//         return jjMoveStringLiteralDfa3_0(active0, 0x1801800000L);
//      case 117:
//         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
//      default :
//         break;
//   }
//   return jjStartNfa_0(1, active0);
//}
//static private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
//{
//   if (((active0 &= old0)) == 0L)
//      return jjStartNfa_0(1, old0); 
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(2, active0);
//      return 3;
//   }
//   switch(curChar)
//   {
//      case 67:
//         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
//      case 70:
//         return jjMoveStringLiteralDfa4_0(active0, 0x280000L);
//      case 76:
//         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
//      case 82:
//         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
//      case 84:
//         return jjMoveStringLiteralDfa4_0(active0, 0x500000L);
//      case 97:
//         return jjMoveStringLiteralDfa4_0(active0, 0x1c000000000L);
//      case 99:
//         return jjMoveStringLiteralDfa4_0(active0, 0x40000007c00L);
//      case 101:
//         if ((active0 & 0x80000000000L) != 0L)
//            return jjStartNfaWithStates_0(3, 43, 4);
//         return jjMoveStringLiteralDfa4_0(active0, 0x690000000L);
//      case 103:
//         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
//      case 104:
//         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
//      case 108:
//         return jjMoveStringLiteralDfa4_0(active0, 0x22000000L);
//      case 110:
//         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
//      case 111:
//         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
//      case 114:
//         return jjMoveStringLiteralDfa4_0(active0, 0x1001800000L);
//      case 115:
//         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
//      case 116:
//         if ((active0 & 0x8000000L) != 0L)
//            return jjStartNfaWithStates_0(3, 27, 4);
//         else if ((active0 & 0x2000000000L) != 0L)
//            return jjStartNfaWithStates_0(3, 37, 4);
//         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
//      default :
//         break;
//   }
//   return jjStartNfa_0(2, active0);
//}
//static private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
//{
//   if (((active0 &= old0)) == 0L)
//      return jjStartNfa_0(2, old0); 
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(3, active0);
//      return 4;
//   }
//   switch(curChar)
//   {
//      case 97:
//         return jjMoveStringLiteralDfa5_0(active0, 0x2020000L);
//      case 99:
//         return jjMoveStringLiteralDfa5_0(active0, 0x1c000000000L);
//      case 100:
//         return jjMoveStringLiteralDfa5_0(active0, 0x600000000L);
//      case 101:
//         if ((active0 & 0x100000000000L) != 0L)
//            return jjStartNfaWithStates_0(4, 44, 4);
//         return jjMoveStringLiteralDfa5_0(active0, 0x40000047c00L);
//      case 104:
//         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
//      case 105:
//         return jjMoveStringLiteralDfa5_0(active0, 0x1800000L);
//      case 110:
//         if ((active0 & 0x10000000L) != 0L)
//            return jjStartNfaWithStates_0(4, 28, 4);
//         break;
//      case 111:
//         return jjMoveStringLiteralDfa5_0(active0, 0x820510000L);
//      case 114:
//         return jjMoveStringLiteralDfa5_0(active0, 0xc0280000L);
//      case 115:
//         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
//      case 117:
//         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
//      case 121:
//         if ((active0 & 0x1000000000L) != 0L)
//            return jjStartNfaWithStates_0(4, 36, 4);
//         break;
//      default :
//         break;
//   }
//   return jjStartNfa_0(3, active0);
//}
//static private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
//{
//   if (((active0 &= old0)) == 0L)
//      return jjStartNfa_0(3, old0); 
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(4, active0);
//      return 5;
//   }
//   switch(curChar)
//   {
//      case 67:
//         return jjMoveStringLiteralDfa6_0(active0, 0x1404400L);
//      case 77:
//         return jjMoveStringLiteralDfa6_0(active0, 0x801800L);
//      case 82:
//         return jjMoveStringLiteralDfa6_0(active0, 0x102000L);
//      case 99:
//         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
//      case 100:
//         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
//      case 101:
//         if ((active0 & 0x4000000000L) != 0L)
//            return jjStartNfaWithStates_0(5, 38, 4);
//         else if ((active0 & 0x8000000000L) != 0L)
//            return jjStartNfaWithStates_0(5, 39, 4);
//         else if ((active0 & 0x10000000000L) != 0L)
//            return jjStartNfaWithStates_0(5, 40, 4);
//         break;
//      case 105:
//         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
//      case 108:
//         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
//      case 111:
//         return jjMoveStringLiteralDfa6_0(active0, 0x40280000L);
//      case 112:
//         return jjMoveStringLiteralDfa6_0(active0, 0x600000000L);
//      case 114:
//         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
//      case 115:
//         if ((active0 & 0x40000000000L) != 0L)
//            return jjStartNfaWithStates_0(5, 42, 4);
//         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
//      case 116:
//         if ((active0 & 0x100000000L) != 0L)
//            return jjStartNfaWithStates_0(5, 32, 4);
//         return jjMoveStringLiteralDfa6_0(active0, 0x2040000L);
//      case 118:
//         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
//      default :
//         break;
//   }
//   return jjStartNfa_0(4, active0);
//}
//static private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
//{
//   if (((active0 &= old0)) == 0L)
//      return jjStartNfa_0(4, old0); 
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(5, active0);
//      return 6;
//   }
//   switch(curChar)
//   {
//      case 83:
//         if ((active0 & 0x1000000L) != 0L)
//            return jjStartNfaWithStates_0(6, 24, 4);
//         break;
//      case 97:
//         return jjMoveStringLiteralDfa7_0(active0, 0x80010000L);
//      case 99:
//         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
//      case 101:
//         return jjMoveStringLiteralDfa7_0(active0, 0x903800L);
//      case 105:
//         return jjMoveStringLiteralDfa7_0(active0, 0x22000000L);
//      case 108:
//         if ((active0 & 0x20000L) != 0L)
//            return jjStartNfaWithStates_0(6, 17, 4);
//         return jjMoveStringLiteralDfa7_0(active0, 0x640000000L);
//      case 109:
//         return jjMoveStringLiteralDfa7_0(active0, 0x280000L);
//      case 111:
//         return jjMoveStringLiteralDfa7_0(active0, 0x404400L);
//      case 115:
//         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
//      case 116:
//         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
//      case 117:
//         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
//      default :
//         break;
//   }
//   return jjStartNfa_0(5, active0);
//}
//static private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
//{
//   if (((active0 &= old0)) == 0L)
//      return jjStartNfa_0(5, old0); 
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(6, active0);
//      return 7;
//   }
//   switch(curChar)
//   {
//      case 67:
//         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
//      case 82:
//         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
//      case 97:
//         return jjMoveStringLiteralDfa8_0(active0, 0x600000000L);
//      case 98:
//         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L);
//      case 101:
//         if ((active0 & 0x20000000000L) != 0L)
//            return jjStartNfaWithStates_0(7, 41, 4);
//         break;
//      case 105:
//         return jjMoveStringLiteralDfa8_0(active0, 0x800008000L);
//      case 108:
//         if ((active0 & 0x10000L) != 0L)
//            return jjStartNfaWithStates_0(7, 16, 4);
//         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
//      case 109:
//         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
//      case 110:
//         return jjMoveStringLiteralDfa8_0(active0, 0x20404000L);
//      case 111:
//         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
//      case 114:
//         return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
//      case 115:
//         return jjMoveStringLiteralDfa8_0(active0, 0x102000L);
//      case 116:
//         return jjMoveStringLiteralDfa8_0(active0, 0x801800L);
//      default :
//         break;
//   }
//   return jjStartNfa_0(6, active0);
//}
//static private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
//{
//   if (((active0 &= old0)) == 0L)
//      return jjStartNfa_0(6, old0); 
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(7, active0);
//      return 8;
//   }
//   switch(curChar)
//   {
//      case 97:
//         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L);
//      case 99:
//         return jjMoveStringLiteralDfa9_0(active0, 0x600000000L);
//      case 101:
//         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
//      case 103:
//         if ((active0 & 0x800000000L) != 0L)
//            return jjStartNfaWithStates_0(8, 35, 4);
//         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
//      case 104:
//         return jjMoveStringLiteralDfa9_0(active0, 0x801800L);
//      case 108:
//         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L);
//      case 109:
//         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
//      case 110:
//         if ((active0 & 0x40000L) != 0L)
//            return jjStartNfaWithStates_0(8, 18, 4);
//         else if ((active0 & 0x2000000L) != 0L)
//            return jjStartNfaWithStates_0(8, 25, 4);
//         break;
//      case 111:
//         return jjMoveStringLiteralDfa9_0(active0, 0x30a000L);
//      case 116:
//         return jjMoveStringLiteralDfa9_0(active0, 0x404000L);
//      default :
//         break;
//   }
//   return jjStartNfa_0(7, active0);
//}
//static private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
//{
//   if (((active0 &= old0)) == 0L)
//      return jjStartNfa_0(7, old0); 
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(8, active0);
//      return 9;
//   }
//   switch(curChar)
//   {
//      case 80:
//         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
//      case 98:
//         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
//      case 101:
//         if ((active0 & 0x80000000L) != 0L)
//            return jjStartNfaWithStates_0(9, 31, 4);
//         else if ((active0 & 0x200000000L) != 0L)
//            return jjStartNfaWithStates_0(9, 33, 4);
//         return jjMoveStringLiteralDfa10_0(active0, 0x400000000L);
//      case 110:
//         if ((active0 & 0x8000L) != 0L)
//            return jjStartNfaWithStates_0(9, 15, 4);
//         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
//      case 111:
//         return jjMoveStringLiteralDfa10_0(active0, 0x801c00L);
//      case 114:
//         return jjMoveStringLiteralDfa10_0(active0, 0x404000L);
//      case 115:
//         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
//      case 117:
//         return jjMoveStringLiteralDfa10_0(active0, 0x102000L);
//      default :
//         break;
//   }
//   return jjStartNfa_0(8, active0);
//}
//static private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
//{
//   if (((active0 &= old0)) == 0L)
//      return jjStartNfa_0(8, old0); 
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(9, active0);
//      return 10;
//   }
//   switch(curChar)
//   {
//      case 77:
//         if ((active0 & 0x20000000L) != 0L)
//            return jjStartNfaWithStates_0(10, 29, 4);
//         break;
//      case 100:
//         if ((active0 & 0x800000L) != 0L)
//            return jjStartNfaWithStates_0(10, 23, 4);
//         return jjMoveStringLiteralDfa11_0(active0, 0x1800L);
//      case 108:
//         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L);
//      case 110:
//         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
//      case 111:
//         return jjMoveStringLiteralDfa11_0(active0, 0x484000L);
//      case 114:
//         return jjMoveStringLiteralDfa11_0(active0, 0x102000L);
//      case 115:
//         if ((active0 & 0x400000000L) != 0L)
//            return jjStartNfaWithStates_0(10, 34, 4);
//         break;
//      case 116:
//         return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
//      default :
//         break;
//   }
//   return jjStartNfa_0(9, active0);
//}
//static private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
//{
//   if (((active0 &= old0)) == 0L)
//      return jjStartNfa_0(9, old0); 
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(10, active0);
//      return 11;
//   }
//   switch(curChar)
//   {
//      case 69:
//         return jjMoveStringLiteralDfa12_0(active0, 0x1800L);
//      case 76:
//         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
//      case 99:
//         return jjMoveStringLiteralDfa12_0(active0, 0x102000L);
//      case 101:
//         if ((active0 & 0x40000000L) != 0L)
//            return jjStartNfaWithStates_0(11, 30, 4);
//         break;
//      case 108:
//         if ((active0 & 0x4000L) != 0L)
//            return jjStartNfaWithStates_0(11, 14, 4);
//         return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
//      case 114:
//         return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
//      case 117:
//         return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
//      default :
//         break;
//   }
//   return jjStartNfa_0(10, active0);
//}
//static private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
//{
//   if (((active0 &= old0)) == 0L)
//      return jjStartNfa_0(10, old0); 
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(11, active0);
//      return 12;
//   }
//   switch(curChar)
//   {
//      case 101:
//         if ((active0 & 0x2000L) != 0L)
//            return jjStartNfaWithStates_0(12, 13, 4);
//         else if ((active0 & 0x100000L) != 0L)
//            return jjStartNfaWithStates_0(12, 20, 4);
//         break;
//      case 108:
//         return jjMoveStringLiteralDfa13_0(active0, 0x400000L);
//      case 110:
//         return jjMoveStringLiteralDfa13_0(active0, 0x800L);
//      case 111:
//         return jjMoveStringLiteralDfa13_0(active0, 0x200400L);
//      case 114:
//         return jjMoveStringLiteralDfa13_0(active0, 0x80000L);
//      case 120:
//         return jjMoveStringLiteralDfa13_0(active0, 0x1000L);
//      default :
//         break;
//   }
//   return jjStartNfa_0(11, active0);
//}
//static private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
//{
//   if (((active0 &= old0)) == 0L)
//      return jjStartNfa_0(11, old0); 
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(12, active0);
//      return 13;
//   }
//   switch(curChar)
//   {
//      case 99:
//         return jjMoveStringLiteralDfa14_0(active0, 0x80400L);
//      case 101:
//         return jjMoveStringLiteralDfa14_0(active0, 0x400000L);
//      case 105:
//         return jjMoveStringLiteralDfa14_0(active0, 0x1000L);
//      case 108:
//         return jjMoveStringLiteralDfa14_0(active0, 0x200000L);
//      case 116:
//         return jjMoveStringLiteralDfa14_0(active0, 0x800L);
//      default :
//         break;
//   }
//   return jjStartNfa_0(12, active0);
//}
//static private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
//{
//   if (((active0 &= old0)) == 0L)
//      return jjStartNfa_0(12, old0); 
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(13, active0);
//      return 14;
//   }
//   switch(curChar)
//   {
//      case 97:
//         return jjMoveStringLiteralDfa15_0(active0, 0x400L);
//      case 101:
//         if ((active0 & 0x80000L) != 0L)
//            return jjStartNfaWithStates_0(14, 19, 4);
//         break;
//      case 108:
//         return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
//      case 114:
//         if ((active0 & 0x400000L) != 0L)
//            return jjStartNfaWithStates_0(14, 22, 4);
//         return jjMoveStringLiteralDfa15_0(active0, 0x800L);
//      case 116:
//         if ((active0 & 0x1000L) != 0L)
//            return jjStartNfaWithStates_0(14, 12, 4);
//         break;
//      default :
//         break;
//   }
//   return jjStartNfa_0(13, active0);
//}
//static private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
//{
//   if (((active0 &= old0)) == 0L)
//      return jjStartNfa_0(13, old0); 
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(14, active0);
//      return 15;
//   }
//   switch(curChar)
//   {
//      case 101:
//         return jjMoveStringLiteralDfa16_0(active0, 0x200000L);
//      case 108:
//         if ((active0 & 0x400L) != 0L)
//            return jjStartNfaWithStates_0(15, 10, 4);
//         break;
//      case 121:
//         if ((active0 & 0x800L) != 0L)
//            return jjStartNfaWithStates_0(15, 11, 4);
//         break;
//      default :
//         break;
//   }
//   return jjStartNfa_0(14, active0);
//}
//static private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
//{
//   if (((active0 &= old0)) == 0L)
//      return jjStartNfa_0(14, old0); 
//   try { curChar = input_stream.readChar(); }
//   catch(java.io.IOException e) {
//      jjStopStringLiteralDfa_0(15, active0);
//      return 16;
//   }
//   switch(curChar)
//   {
//      case 114:
//         if ((active0 & 0x200000L) != 0L)
//            return jjStartNfaWithStates_0(16, 21, 4);
//         break;
//      default :
//         break;
//   }
//   return jjStartNfa_0(15, active0);
//}
//static private final void jjCheckNAdd(int state)
//{
//   if (jjrounds[state] != jjround)
//   {
//      jjstateSet[jjnewStateCnt++] = state;
//      jjrounds[state] = jjround;
//   }
//}
//static private final void jjAddStates(int start, int end)
//{
//   do {
//      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
//   } while (start++ != end);
//}
//static private final void jjCheckNAddTwoStates(int state1, int state2)
//{
//   jjCheckNAdd(state1);
//   jjCheckNAdd(state2);
//}
//static private final void jjCheckNAddStates(int start, int end)
//{
//   do {
//      jjCheckNAdd(jjnextStates[start]);
//   } while (start++ != end);
//}
//static private final void jjCheckNAddStates(int start)
//{
//   jjCheckNAdd(jjnextStates[start]);
//   jjCheckNAdd(jjnextStates[start + 1]);
//}
//static private final int jjMoveNfa_0(int startState, int curPos)
//{
//   int[] nextStates;
//   int startsAt = 0;
//   jjnewStateCnt = 3;
//   int i = 1;
//   jjstateSet[0] = startState;
//   int j, kind = 0x7fffffff;
//   for (;;)
//   {
//      if (++jjround == 0x7fffffff)
//         ReInitRounds();
//      if (curChar < 64)
//      {
//         long l = 1L << curChar;
//         MatchLoop: do
//         {
//            switch(jjstateSet[--i])
//            {
//               case 4:
//               case 1:
//                  if ((0x3ff000000000000L & l) == 0L)
//                     break;
//                  if (kind > 45)
//                     kind = 45;
//                  jjCheckNAdd(1);
//                  break;
//               case 3:
//               case 2:
//                  if ((0x3ff000000000000L & l) == 0L)
//                     break;
//                  if (kind > 46)
//                     kind = 46;
//                  jjCheckNAdd(2);
//                  break;
//               default : break;
//            }
//         } while(i != startsAt);
//      }
//      else if (curChar < 128)
//      {
//         long l = 1L << (curChar & 077);
//         MatchLoop: do
//         {
//            switch(jjstateSet[--i])
//            {
//               case 4:
//               case 0:
//                  if ((0x7fffffe07fffffeL & l) != 0L)
//                     jjCheckNAddTwoStates(0, 1);
//                  break;
//               case 3:
//                  if ((0x7fffffe07fffffeL & l) != 0L)
//                     jjCheckNAddTwoStates(0, 1);
//                  break;
//               default : break;
//            }
//         } while(i != startsAt);
//      }
//      else
//      {
//         int i2 = (curChar & 0xff) >> 6;
//         long l2 = 1L << (curChar & 077);
//         MatchLoop: do
//         {
//            switch(jjstateSet[--i])
//            {
//               default : break;
//            }
//         } while(i != startsAt);
//      }
//      if (kind != 0x7fffffff)
//      {
//         jjmatchedKind = kind;
//         jjmatchedPos = curPos;
//         kind = 0x7fffffff;
//      }
//      ++curPos;
//      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
//         return curPos;
//      try { curChar = input_stream.readChar(); }
//      catch(java.io.IOException e) { return curPos; }
//   }
//}
//static final int[] jjnextStates = {
//};
//public static final String[] jjstrLiteralImages = {
//"", null, null, null, null, "\75", "\54", "\73", "\175", "\173", 
//"\120\154\141\143\145\103\157\155\155\157\156\114\157\143\141\154", "\120\154\141\143\145\115\145\164\150\157\144\105\156\164\162\171", 
//"\120\154\141\143\145\115\145\164\150\157\144\105\170\151\164", "\120\154\141\143\145\122\145\163\157\165\162\143\145", 
//"\120\154\141\143\145\103\157\156\164\162\157\154", "\124\162\141\156\163\151\164\151\157\156", 
//"\101\162\143\114\157\143\141\154", "\101\162\143\103\141\154\154", "\101\162\143\122\145\164\165\162\156", 
//"\101\162\143\106\162\157\155\122\145\163\157\165\162\143\145", "\101\162\143\124\157\122\145\163\157\165\162\143\145", 
//"\101\162\143\106\162\157\155\103\157\156\164\162\157\154\154\145\162", "\101\162\143\124\157\103\157\156\164\162\157\154\154\145\162", 
//"\120\145\164\162\151\115\145\164\150\157\144", "\120\145\164\162\151\103\123", "\126\151\157\154\141\164\151\157\156", 
//"\55\76", "\163\164\155\164", "\164\157\153\145\156", 
//"\145\156\143\154\157\163\151\156\147\120\115", "\143\157\156\164\162\157\154\154\141\142\154\145", 
//"\157\142\163\145\162\166\141\142\154\145", "\167\145\151\147\150\164", "\143\164\162\145\144\160\154\141\143\145", 
//"\157\142\163\145\144\160\154\141\143\145\163", "\155\145\164\150\157\144\163\151\147", "\145\156\164\162\171", 
//"\145\170\151\164", "\160\160\154\141\143\145", "\143\160\154\141\143\145", 
//"\162\160\154\141\143\145", "\162\145\163\157\165\162\143\145", "\160\154\141\143\145\163", 
//"\164\162\165\145", "\146\141\154\163\145", null, null, };
//public static final String[] lexStateNames = {
//   "DEFAULT", 
//};
//static final long[] jjtoToken = {
//   0x7fffffffffe1L, 
//};
//static final long[] jjtoSkip = {
//   0x1eL, 
//};
//static protected SimpleCharStream input_stream;
//static private final int[] jjrounds = new int[3];
//static private final int[] jjstateSet = new int[6];
//static protected char curChar;
//public PNparserTokenManager(SimpleCharStream stream){
//   if (input_stream != null)
//      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
//   input_stream = stream;
//}
//public PNparserTokenManager(SimpleCharStream stream, int lexState){
//   this(stream);
//   SwitchTo(lexState);
//}
//static public void ReInit(SimpleCharStream stream)
//{
//   jjmatchedPos = jjnewStateCnt = 0;
//   curLexState = defaultLexState;
//   input_stream = stream;
//   ReInitRounds();
//}
//static private final void ReInitRounds()
//{
//   int i;
//   jjround = 0x80000001;
//   for (i = 3; i-- > 0;)
//      jjrounds[i] = 0x80000000;
//}
//static public void ReInit(SimpleCharStream stream, int lexState)
//{
//   ReInit(stream);
//   SwitchTo(lexState);
//}
//static public void SwitchTo(int lexState)
//{
//   if (lexState >= 1 || lexState < 0)
//      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
//   else
//      curLexState = lexState;
//}
//
//static protected Token jjFillToken()
//{
//   Token t = Token.newToken(jjmatchedKind);
//   t.kind = jjmatchedKind;
//   String im = jjstrLiteralImages[jjmatchedKind];
//   t.image = (im == null) ? input_stream.GetImage() : im;
//   t.beginLine = input_stream.getBeginLine();
//   t.beginColumn = input_stream.getBeginColumn();
//   t.endLine = input_stream.getEndLine();
//   t.endColumn = input_stream.getEndColumn();
//   return t;
//}
//
//static int curLexState = 0;
//static int defaultLexState = 0;
//static int jjnewStateCnt;
//static int jjround;
//static int jjmatchedPos;
//static int jjmatchedKind;
//
//public static Token getNextToken() 
//{
//  int kind;
//  Token specialToken = null;
//  Token matchedToken;
//  int curPos = 0;
//
//  EOFLoop :
//  for (;;)
//  {   
//   try   
//   {     
//      curChar = input_stream.BeginToken();
//   }     
//   catch(java.io.IOException e)
//   {        
//      jjmatchedKind = 0;
//      matchedToken = jjFillToken();
//      return matchedToken;
//   }
//
//   try { input_stream.backup(0);
//      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
//         curChar = input_stream.BeginToken();
//   }
//   catch (java.io.IOException e1) { continue EOFLoop; }
//   jjmatchedKind = 0x7fffffff;
//   jjmatchedPos = 0;
//   curPos = jjMoveStringLiteralDfa0_0();
//   if (jjmatchedKind != 0x7fffffff)
//   {
//      if (jjmatchedPos + 1 < curPos)
//         input_stream.backup(curPos - jjmatchedPos - 1);
//      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
//      {
//         matchedToken = jjFillToken();
//         return matchedToken;
//      }
//      else
//      {
//         continue EOFLoop;
//      }
//   }
//   int error_line = input_stream.getEndLine();
//   int error_column = input_stream.getEndColumn();
//   String error_after = null;
//   boolean EOFSeen = false;
//   try { input_stream.readChar(); input_stream.backup(1); }
//   catch (java.io.IOException e1) {
//      EOFSeen = true;
//      error_after = curPos <= 1 ? "" : input_stream.GetImage();
//      if (curChar == '\n' || curChar == '\r') {
//         error_line++;
//         error_column = 0;
//      }
//      else
//         error_column++;
//   }
//   if (!EOFSeen) {
//      input_stream.backup(1);
//      error_after = curPos <= 1 ? "" : input_stream.GetImage();
//   }
//   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
//  }
//}
//
//}
