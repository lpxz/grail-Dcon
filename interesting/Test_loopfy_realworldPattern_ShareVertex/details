FileResource.java
  public void initialize(Object values[]) {
312:        super.initialize(values);
        disableEvent();
        String filename = getFilename();
        if (filename != null) {
316:            ResourceReference rr = getParent();
            if (rr != null) {
                try {
                    Resource parent = rr.unsafeLock();
                    setValue(ATTR_URL, parent.unsafeGetURLPath() + java.net.URLEncoder.encode(getIdentifier()));
                } catch (InvalidResourceException ex) {
                } finally {
                    rr.unlock();
                }
            }
        }
        enableEvent();
    }
    
    
 Resource.java   
        public void initialize(Hashtable defs) {
719:        Object values[] = ((this.values == null) ? new Object[attributes.length] : this.values);
        edu.hkust.clap.monitor.Monitor.loopBegin(857);
for (int i = 0; i < values.length; i++) { 
edu.hkust.clap.monitor.Monitor.loopInc(857);
{
            String attrname = attributes[i].getName();
            Object def = defs.get(attrname);
            if (values[i] == null) {
                if ((i == ATTR_HELP_URL) && (def != null) && (def instanceof String)) {
                    values[i] = ((String) def).intern();
                } else {
                    values[i] = def;
                }
            }
        }} 
edu.hkust.clap.monitor.Monitor.loopEnd(857);

736:        initialize(values);
    }
    
    
    AttributeHolder.java
     public synchronized void setValue(int idx, Object value) {
        if ((idx < 0) || (idx >= attributes.length)) throw new IllegalAttributeAccess(this, idx);
        Attribute attr = attributes[idx];
        if (attr.checkValue(value)) {
132:            values[idx] = value;
        } else {
            throw new IllegalAttributeAccess(this, attr, value);
        }
    }
    
    Two AVs, on the same variable:
    719 132 736
    719 132 736(duplicated... a lot)
    312 132 316
    Note that, many different AVs on the shared accesses are translated to the same AV after the inlining.
    
    
